import pathlib
import os
import google.generativeai as genai
import mimetypes
import base64

# Configure the Gemini API key
api_key = ""
genai.configure(api_key=api_key)

# Helper function to read image bytes and encode them in base64
def read_image_base64(image_path):
    image_bytes = pathlib.Path(image_path).read_bytes()
    return base64.b64encode(image_bytes).decode('utf-8')

# Helper function to get MIME type based on file extension
def get_mime_type(file_path):
    mime_type, _ = mimetypes.guess_type(file_path)
    return mime_type or 'application/octet-stream'

# Function to process images in a folder and send to Gemini Vision API
def process_images_in_folder_gemini_base64(folder_path, prompt, model_name='gemini-1.5-pro-latest'):
    images = []
    image_extensions = ('.png', '.jpg', '.jpeg', '.bmp', '.gif', '.tiff', '.webp')

    # Read image bytes in the folder and encode them in base64
    for root, _, files in os.walk(folder_path):
        for file in files:
            if file.lower().endswith(image_extensions):
                image_path = os.path.join(root, file)
                images.append({
                    'mime_type': get_mime_type(image_path),
                    'data': read_image_base64(image_path)
                })

    # Create model instance
    model = genai.GenerativeModel(model_name)

    # Prepare content
    content = [prompt] + images

    # Generate content
    try:
        response = model.generate_content(
            content,
            stream=False,  # Adjust based on your needs
            safety_settings=[]
        )
        
        # Print response
        print(response.text)
        
    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage
folder_path = r"/Users/p/Desktop/images"  # Same folder as your OpenAI test folder
prompt = "Do these look store-bought or homemade?"

process_images_in_folder_gemini_base64(folder_path, prompt)
